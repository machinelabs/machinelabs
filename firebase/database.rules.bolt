isSystem() {
  return auth.uid === 'SYSTEM_USER';
}

isCurrentUser(uid) { auth != null && auth.uid == uid }

isAnonymous() {
  return auth.provider === 'anonymous';
}

isOwningUserOrSystem(ref) {
  return prior(ref) !== null ? (isCurrentUser(data.child('user_id').val()) && isCurrentUser(newData.child('user_id').val())) || isSystem() : isCurrentUser(newData.child('user_id').val())
}

isOwningUser(ref, uidFieldName) {
  return prior(ref) !== null ? (isCurrentUser(data.child(uidFieldName).val()) && isCurrentUser(newData.child(uidFieldName).val())) : isCurrentUser(newData.child(uidFieldName).val())
}

hasPlan() {
  return root.child('/users/'+ auth.uid +'/plan').val() != null;
}

hasNoPlan() {
  return !hasPlan()
}

hasBetaPlan() {
  return root.child('/users/' + auth.uid + '/plan/plan_id').val() === 'beta'
}

hasHigherThanBetaPlan() {
  return hasPlan() && !hasBetaPlan()
}

validateReadLabPrivacy(lab) {
  return lab.child('is_private').val() ? isSystem() || (isCurrentUser(lab.child('user_id').val()) && hasHigherThanBetaPlan()) : true
}

validateWriteLabPrivacy(lab) {
  return hasNoPlan() ?
    isOwningUser(lab, 'user_id') && !lab.child('is_private').val() :
    isOwningUser(lab, 'user_id') && (!lab.child('is_private').val() || hasHigherThanBetaPlan())
}

validateReadExecutionPrivacy(execution) {
  return !root.child('labs').child(execution.child('lab/id').val()).child('common/is_private').val() || (isCurrentUser(execution.child('user_id').val()) && hasHigherThanBetaPlan()) || isSystem();
}

isInvocationRateProofKey(userId, key) {
  key === root.child('/idx/invocation_rate_proof/' + userId + '/key').val()
}

type HandshakeRequest {
  id: String,
  token: String | Null
}

type HandshakeCommit {
  id: String,
  user_id: String
}

type Lab {
  id: String,
  user_id: String,
  name: String,
  description: String,
  has_cached_run: Boolean | Null,
  cache_hash: String | Null
  tags: String[],
  directory: String,
  hidden: Boolean,
  created_at: Number,
  modified_at: Number,
  fork_of: String | Null,
  is_private: Boolean
}

type File {
  name: String,
  content: String
}

type InvocationLab {
  id: String,
  directory: String
}

type InvocationExecution {
  execution_id: String
}

type AllowOther {
  validate() { true }
}

type Invocation {
  id: String,
  user_id: String,
  timestamp: Number,
  type: String,
  data: InvocationLab | InvocationExecution
}

type ServerWritableString extends String {
  validate() { isSystem() }
}

type ServerWritableNumber extends Number {
  validate() { isSystem() }
}

type Execution {
  id: ServerWritableString,
  cache_hash: ServerWritableString,
  started_at: ServerWritableNumber,
  finished_at: ServerWritableNumber | Null,
  failed_at: ServerWritableNumber | Null,
  stopped_at: ServerWritableNumber | Null,
  server_id: ServerWritableString,
  server_info: ServerWritableString,
  hardware_type: ServerWritableString,
  user_id: ServerWritableString,
  lab: InvocationLab,
  status: ServerWritableString,
  hidden: Boolean | Null,
  name: String | Null
}

type ExecutionMessage {
  id: String,
  index: Number,
  virtual_index: Number,
  timestamp: Number,
  data: Any,
  kind: String,
  terminal_mode: Boolean
}

type Plan {
  id: String,
  name: String,
  description: String,
  free_credit: Number
}

type AnonymousState extends Boolean {
  validate() { this === isAnonymous() }
}

type UserId extends String {
  validate() { this === auth.uid }
}

type UserEmail extends String {
  validate() { this === auth.email }
}

type User {
  id: UserId,
  isAnonymous: AnonymousState,
  displayName: String,
  bio: String,
  photoUrl: String,
  email: UserEmail,
}

type Server {
  id: String,
  hardware_type: String,
  name: String
  disabled: Boolean
}

type RateProof {
  timestamp: ThrottledTimeStamp,
  key: String
}

type ThrottledTimeStamp extends Number {
  validate() {
    newData.isNumber() && newData.val() === now && (data.val() == null || newData.val() > data.val() + 1000)
  }
}

path /idx/invocation_rate_proof/{userId} is RateProof {
  read() { isCurrentUser($userId) }
  write() { isCurrentUser($userId) && newData.val() != null }
}

path / {
  read() { isSystem() }
  write() { false }
}

path /labs/{id}/common is Lab {
  read() { validateReadLabPrivacy(prior(this)) }
  write() { (isOwningUser(this, 'user_id') && validateWriteLabPrivacy(this)) || isSystem() }
}

path /labs {
  index() { ['common/cache_hash'] }
}

path /invocations/{id}/common is Invocation {
  read() { isCurrentUser(data.child('user_id').val()) || isSystem() }
  write() { (isOwningUser(this, 'user_id') && isInvocationRateProofKey(auth.uid, $id)) || isSystem() }
}

path /invocations/{id} {
  read() { isSystem() }
  write() { isSystem() }
}

path /invocations {
  index() { [
    'server/id',
    'server/ahlem/timestamp',
    'server/hainholz/timestamp',
    'server/stephanskirchen/timestamp',
    'server/rijnbuurt/timestamp'
    ] }
}

path /executions/{id}/common is Execution {
  read() { validateReadExecutionPrivacy(prior(this)) }
  write() { isOwningUser(this, 'user_id') || isSystem() }
}

path /executions/{id}/outputs {
  read() { true }
}

path /executions {
  index() { ['common/cache_hash']}
}

path /executions/{id}/messages {
  read() { true }
  write() { isSystem() }
  index() { ['index', 'virtual_index', 'kind']}
}

path /executions/{id}/messages/{mid} is ExecutionMessage {
  read() { true }
  write() { isSystem() }
}

path /users/{id}/common is User {
  read() { true }
  write() { isOwningUser(this, 'id') && isCurrentUser(id) }
}

path /users/{id}/plan {
  read() { isCurrentUser(id) || isSystem() }
}

path /servers {
  read() { isSystem() }
  write() { false }
}

path /servers/{id} is Server {}

// The one initiating the handshake (e.g. CLI) is the only one who
// will be able to read or write to this. Hence, no one else can
// access the token. Still, it is preferable to delete the token
// immediately after it was read.

path /handshakes/{id}/request is HandshakeRequest {
  read() { isCurrentUser(id) }
  write() { isCurrentUser(id) }
}

// Everyone can commit a request but it is guaranteed that the user_id
// that is used for the commit matches the one who is making the commit.
// In other words, one can not make a commit with the user_id of someone else.

// In addition, it is guaranteed that commits can not be changed once written.
path /handshakes/{id}/commit is HandshakeCommit {
  read() { isCurrentUser(id) }
  write() { prior(this) == null && isCurrentUser(this.child('user_id').val()) }
}

path /idx/recent_labs {
  read() { true }
  write() { false }
  index() { ['updated_at'] }
}

path /idx/user_labs/{id} {
  read() { true }
  write() { false }
}

path /idx/lab_executions/{id} {
  read() { true }
  write() { false }
}

path /idx/lab_visible_executions/{id} {
  read() { true }
  write() { false }
}

path /idx/user_executions/{id} {
  read() { isSystem() }
  write() { false }
}

path /idx/user_visible_executions/{id} {
  read() { true }
  write() { false }
}

path /idx/user_visible_labs/{id} {
  read() { true }
  write() { false }
}

path /docker_images/common {
  read() { true }
}


